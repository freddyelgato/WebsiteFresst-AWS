
services:
  # ========================
  # Microservicios de Products
  # ========================
  products-db:
    build:
      context: ../BackEnd/databases/Products
      dockerfile: Dockerfile
    container_name: products-db
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: user
      MONGO_INITDB_ROOT_PASSWORD: password
    networks:
      - my_network

  create-product:
    build:
      context: ../BackEnd/Domains/Product/Create(ApiRest)
      dockerfile: Dockerfile
    container_name: create-product-container
    ports:
      - "4000:4000"
    environment:
      - MONGO_URI=mongodb://user:password@products-db:27017/spaceofsport_products?authSource=admin
    networks:
      - my_network
    depends_on:
      - products-db

  product-search:
    build:
      context: ../BackEnd/Domains/Product/Product_Search(ApiRest)
      dockerfile: Dockerfile
    container_name: product-search-container
    ports:
      - "4003:4003"
    environment:
      - MONGO_URI=mongodb://user:password@products-db:27017/spaceofsport_products?authSource=admin
    networks:
      - my_network
    depends_on:
      - products-db

  delete-product:
    build:
      context: ../BackEnd/Domains/Product/Delete(ApiRest)
      dockerfile: Dockerfile
    container_name: delete-product-container
    ports:
      - "4001:4001"
    environment:
      - MONGO_URI=mongodb://user:password@products-db:27017/spaceofsport_products?authSource=admin
    networks:
      - my_network
    depends_on:
      - products-db

  edit-product:
    build:
      context: ../BackEnd/Domains/Product/Edit(ApiRest)
      dockerfile: Dockerfile
    container_name: edit-product-container
    ports:
      - "4002:4002"
    environment:
      - MONGO_URI=mongodb://user:password@products-db:27017/spaceofsport_products?authSource=admin
    networks:
      - my_network
    depends_on:
      - products-db

  # ========================
  # Microservicios de Autenticación y Usuarios
  # ========================
  login:
    build:
      context: ../Backend/Domains/Auth/Login
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    depends_on:
      db:
        condition: service_healthy
      validate:
        condition: service_started
    environment:
      DATABASE_URL: postgres://postgres:12345@db:5432/User_DB
      JWT_SECRET: my_secrete_key
    networks:
      - app-network

  validate:
    build:
      context: ../Backend/Domains/Auth/Validation
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://postgres:12345@db:5432/User_DB
    networks:
      - app-network

  logout:
    build:
      context: ../Backend/Domains/Auth/Logout
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    depends_on:
      db:
        condition: service_healthy
      validate:
        condition: service_started
    environment:
      DATABASE_URL: postgres://postgres:12345@db:5432/User_DB
      JWT_SECRET: my_secrete_key
    networks:
      - app-network

  register:
    build:
      context: ../Backend/Domains/Users/Register
      dockerfile: Dockerfile
    ports:
      - "3004:3004"
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://postgres:12345@db:5432/User_DB
    networks:
      - app-network

  listuser:
    build:
      context: ../Backend/Domains/Users/ListUser
      dockerfile: Dockerfile
    ports:
      - "5000:5000"
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://postgres:12345@db:5432/User_DB
    networks:
      - app-network

  deleteuser:
    build:
      context: ../Backend/Domains/Users/DeleteUser
      dockerfile: Dockerfile
    ports:
      - "5001:5001"
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://postgres:12345@db:5432/User_DB
    networks:
      - app-network

  updateuser:
    build:
      context: ../Backend/Domains/Users/UpdateUser
      dockerfile: Dockerfile
    ports:
      - "5002:5002"
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://postgres:12345@db:5432/User_DB
    networks:
      - app-network

  searchuser:
    build:
      context: ../Backend/Domains/Users/SearchUser
      dockerfile: Dockerfile
    ports:
      - "5003:5003"
    depends_on:
      db:
        condition: service_healthy
    environment:
      DATABASE_URL: postgres://postgres:12345@db:5432/User_DB
    networks:
      - app-network

  # ========================
  # Base de datos PostgreSQL
  # ========================
  db:
    image: postgres:latest
    container_name: db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345
      POSTGRES_DB: User_DB
    ports:
      - "5433:5432"
    volumes:
      - ../init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      retries: 5
      timeout: 3s

  # ========================
  # Frontend (Next.js)
  # ========================
  frontend:
    build:
      context: ../Frontend/space-of-sport
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    depends_on:
      - login
      - validate
      - logout
      - register
    networks:
      - app-network
      
  # ========================
  # Base de datos MariaDB
  # ========================

  branches-db:
    build: ../BackEnd/databases/MariaBD  # Construir la imagen desde el Dockerfile
    container_name: branches_db
    ports:
      - "3306:3306"  # Puerto de MariaDB
    environment:
      MARIADB_ROOT_PASSWORD: "rootpassword"
      MARIADB_DATABASE: "BranchesDB"
    volumes:
      - ../BackEnd/databases/MariaBD/init.sql:/docker-entrypoint-initdb.d/init.sql  # Montar el script SQL
    networks:
      - bd-net

  create:
    build:
      context: ../BackEnd/Domains/Branches/CreateBranch # Cambia esto por la ruta correcta al Dockerfile de tu microservicio
      dockerfile: Dockerfile  # Si tu Dockerfile tiene otro nombre, cámbialo
    container_name: create_service
    ports:
      - "5005:80"  # Cambia el puerto según lo que use tu servicio, en este caso está expuesto en 5000
    environment:
      DATABASE_URL: "mysql://root:rootpassword@branches-db:3306/BranchesDB"  # Actualiza aquí la URL completa
    depends_on:
      - branches-db
    networks:
      - bd-net

  branchesmongo-db:
    build:
      context: ../BackEnd/databases/Branches
      dockerfile: Dockerfile
    container_name: branches-db
    ports:
      - "27019:27017"  
    environment:
      MONGO_INITDB_ROOT_USERNAME: user
      MONGO_INITDB_ROOT_PASSWORD: password
    networks:
      - bd-net

  # Servicio para crear Branches
  create-branches:
    build:
      context: ../BackEnd/Domains/Branches/CreateBranch  # Ajusta la ruta a la carpeta correspondiente de Branches
      dockerfile: Dockerfile
    container_name: create-branches-container
    ports:
      - "4010:4000"  # Mapea el puerto 4010 de tu máquina al puerto 4000 del contenedor
    environment:
      - MONGO_URI=mongodb://user:password@branches-db:27019/spaceofsport_branches?authSource=admin  # Conecta con la base de datos de Branches
    networks:
      - bd-net
    depends_on:
      - branchesmongo-db # Cambia a branches-db, si ese es el nombre del contenedor MongoDB de Branches

  # Servicio para editar Branches
  edit-branches:
    build:
      context: ../BackEnd/Domains/Branches/EditBranch
      dockerfile: Dockerfile
    container_name: edit-branches-container
    ports:
      - "4011:4000"  # Mapea el puerto 4011 de tu máquina al puerto 4000 del contenedor
    environment:
      - MONGO_URI=mongodb://user:password@branches-db:27019/spaceofsport_branches?authSource=admin  
    networks:
      - bd-net
    depends_on:
      - branchesmongo-db

  # Servicio para obtener una sucursal por ID
  get-branch:
    build:
      context: ../BackEnd/Domains/Branches/GetBranchById
      dockerfile: Dockerfile
    container_name: get-branch-container
    ports:
      - "4012:4000"  # Mapea el puerto 4012 de tu máquina al puerto 4000 del contenedor
    environment:
      - MONGO_URI=mongodb://user:password@branches-db:27019/spaceofsport_branches?authSource=admin  
    networks:
      - bd-net
    depends_on:
      - branchesmongo-db

  # Servicio para eliminar una sucursal por ID
  delete-branch:
    build:
      context: ../BackEnd/Domains/Branches/DeleteBranchById
      dockerfile: Dockerfile
    container_name: delete-branch-container
    ports:
      - "4013:4000"  # Mapea el puerto 4013 de tu máquina al puerto 4000 del contenedor
    environment:
      - MONGO_URI=mongodb://user:password@branches-db:27019/spaceofsport_branches?authSource=admin  
    networks:
      - bd-net
    depends_on:
      - branchesmongo-db


networks:
  my_network:
    driver: bridge
  app-network:
    driver: bridge
  bd-net:
    driver: bridge
