services:
  # Products domain microservices
  products-db:
    build:
      context: ../BackEnd/databases/Products
      dockerfile: Dockerfile
    container_name: products-db
    ports:
      - "27018:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: user
      MONGO_INITDB_ROOT_PASSWORD: password
    networks:
      - my_network
    

  create-product:
    build:
      context: ../BackEnd/Domains/Product/Create(ApiRest)
      dockerfile: Dockerfile
    container_name: create-product-container
    ports:
      - "4000:4000"
    environment:
      - MONGO_URI=mongodb://user:password@products-db:27017/spaceofsport_products?authSource=admin
    networks:
      - my_network
    depends_on:
      - products-db
  


  product-search:
    build:
      context: ../BackEnd/Domains/Product/Product_Search(ApiRest)
      dockerfile: Dockerfile
    container_name: product-search-container
    ports:
      - "4003:4003"
    environment:
      - MONGO_URI=mongodb://user:password@products-db:27017/spaceofsport_products?authSource=admin
    networks:
      - my_network
    depends_on: 
      - products-db

  delete-product:
    build:
      context: ../BackEnd/Domains/Product/Delete(ApiRest)
      dockerfile: Dockerfile
    container_name: delete-product-container
    ports:
      - "4001:4001"
    environment:
      - MONGO_URI=mongodb://user:password@products-db:27017/spaceofsport_products?authSource=admin
    networks:
      - my_network
    depends_on: 
      - products-db

  edit-product:
      build:
        context: ../BackEnd/Domains/Product/Edit(ApiRest)
        dockerfile: Dockerfile
      container_name: edit-product-container
      ports:
        - "4002:4002"
      environment:
        - MONGO_URI=mongodb://user:password@products-db:27017/spaceofsport_products?authSource=admin
      networks:
        - my_network
      depends_on: 
        - products-db

        

networks:
  my_network:
    driver: bridge

